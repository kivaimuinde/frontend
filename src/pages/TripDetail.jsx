import { useParams, useNavigate } from "react-router-dom";
import { useState, useEffect } from "react";
import api from "../api/axios";
import TripMap from "../components/TripMap";
import TripForm from "../components/TripForm";

export default function TripDetail() {
  const { id } = useParams();
  const navigate = useNavigate();
  const [trip, setTrip] = useState(null);
  const [showModal, setShowModal] = useState(false);
  const [flash, setFlash] = useState({ show: false, message: "", type: "" });
  const [loadingRoute, setLoadingRoute] = useState(false);
  const [loadingLogs, setLoadingLogs] = useState(false);
  const [hasAutoPlanned, setHasAutoPlanned] = useState(false);
  const [hasAutoGeneratedLogs, setHasAutoGeneratedLogs] = useState(false);

  useEffect(() => {
    const fetchTrip = async () => {
      const res = await api.get(`trips/${id}/`);
      setTrip(res.data);
    };
    fetchTrip();
  }, [id]);

  useEffect(() => {
    if (trip && !hasAutoPlanned) {
      setHasAutoPlanned(true);
      planRoute();
    }
  }, [trip]); // eslint-disable-line react-hooks/exhaustive-deps

  useEffect(() => {
    if (trip && !hasAutoGeneratedLogs) {
      setHasAutoGeneratedLogs(true);
      generateLogs();
    }
  }, [trip]); // eslint-disable-line react-hooks/exhaustive-deps

  const showFlash = (message, type) => {
    setFlash({ show: true, message, type });
    setTimeout(() => setFlash({ show: false, message: "", type: "" }), 3000);
  };

  const planRoute = async () => {
    setLoadingRoute(true);
    try {
      await api.post(`trips/${id}/plan_route/`);
      const res = await api.get(`trips/${id}/`);
      setTrip(res.data);
      showFlash("✅ Route planned successfully!", "success");
    } catch (err) {
      const msg =
        err.response?.data?.error ||
        "Failed to plan route. Please check your trip details and try again.";
      showFlash(`❌ ${msg}`, "danger");
    } finally {
      setLoadingRoute(false);
    }
  };

  const generateLogs = async () => {
    setLoadingLogs(true);
    try {
      await api.post(`trips/${id}/generate_logs/`);
      showFlash("✅ Logs generated successfully!", "success");
    } catch (err) {
      const msg =
        err.response?.data?.error ||
        "Failed to generate logs. Please try again.";
      showFlash(`❌ ${msg}`, "danger");
    } finally {
      setLoadingLogs(false);
    }
  };

  const handleTripUpdated = async () => {
    setShowModal(false);
    const res = await api.get(`trips/${id}/`);
    setTrip(res.data);
    showFlash("Trip updated successfully!", "success");
    planRoute();
  };

  const handleTripError = (message) => showFlash(message, "danger");

  if (!trip) return <p className="text-center mt-5">Loading trip...</p>;

  return (
    <div className="container mt-4">
      {flash.show && (
        <div
          className={`flash-message bg-${
            flash.type === "danger" ? "danger" : "success"
          } text-white text-center py-2 px-3 rounded mb-3 shadow`}
          style={{
            position: "fixed",
            top: "20px",
            left: "50%",
            transform: "translateX(-50%)",
            zIndex: 2000,
            opacity: flash.show ? 1 : 0,
            transition: "opacity 0.3s ease-in-out",
          }}
        >
          {flash.message}
        </div>
      )}

      <div className="d-flex justify-content-between align-items-center mb-3">
        <h4>
          {trip.pickup_location.toUpperCase()} →{" "}
          {trip.dropoff_location.toUpperCase()}
        </h4>
        <button
          className="btn btn-outline-secondary"
          onClick={() => window.history.back()}
        >
          Back
        </button>
      </div>

      <div className="mb-3">
        <button
          onClick={planRoute}
          className="btn btn-primary me-2"
          disabled={loadingRoute || loadingLogs}
        >
          {loadingRoute ? "Planning Route..." : "Plan Route"}
        </button>

        <button
          onClick={generateLogs}
          className="btn btn-success me-2"
          disabled={loadingRoute || loadingLogs}
        >
          {loadingLogs ? "Generating Logs..." : "Generate Logs"}
        </button>

        <button
          onClick={() => setShowModal(true)}
          className="btn btn-warning me-2"
          disabled={loadingRoute || loadingLogs}
        >
          Edit Route
        </button>

        {/* ✅ NEW: View Logs Button */}
        <button
          className="btn btn-outline-info"
          onClick={() => navigate(`trip/${id}/logs/`)}
        >
          View Logs
        </button>
      </div>

      {(loadingRoute || loadingLogs) && (
        <div className="progress mb-3" style={{ height: "8px" }}>
          <div
            className={`progress-bar progress-bar-striped progress-bar-animated ${
              loadingRoute ? "bg-primary" : "bg-success"
            }`}
            style={{ width: "100%" }}
          ></div>
        </div>
      )}

      <div className="row">
        <div className="col-lg-8 mb-3">
          <TripMap trip={trip} />
        </div>
        <div className="col-lg-4">
          <div className="alert alert-info small">
            <strong>Note:</strong> You can view detailed driver logs by clicking
            the <b>“View Logs”</b> button above.
          </div>
        </div>
      </div>

      {showModal && (
        <div
          className="modal show d-block"
          tabIndex="-1"
          style={{ backgroundColor: "rgba(0,0,0,0.5)" }}
          aria-modal="true"
          role="dialog"
          onClick={(e) => e.target === e.currentTarget && setShowModal(false)}
        >
          <div className="modal-dialog modal-dialog-centered">
            <div className="modal-content">
              <div className="modal-header">
                <h5 className="modal-title">Edit Trip</h5>
                <button
                  type="button"
                  className="btn-close"
                  onClick={() => setShowModal(false)}
                  aria-label="Close"
                ></button>
              </div>
              <div className="modal-body">
                <TripForm
                  trip={trip}
                  onCreated={handleTripUpdated}
                  onCancel={() => setShowModal(false)}
                  onError={handleTripError}
                  isEdit={true}
                />
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
